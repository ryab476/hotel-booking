import os
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    FSInputFile, WebAppInfo  # ‚Üê –¥–æ–±–∞–≤–ª–µ–Ω WebAppInfo
)
from aiogram import F
from aiogram.filters import CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", 0))
MINI_APP_URL=os.getenv("MINI_APP_HTTP")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# === –ó–ê–ì–†–£–ó–ö–ê –ì–û–°–¢–ò–ù–ò–¶ –ò–ó –§–ê–ô–õ–ê ===
HOTELS_FILE = "hotels.json"

def load_hotels():
    if os.path.exists(HOTELS_FILE):
        try:
            with open(HOTELS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ hotels.json: {e}")
            return {}
    else:
        default_hotels = {
            "–ê–ª—å—Ñ–∞": {
                "–°—Ç–∞–Ω–¥–∞—Ä—Ç": {"price": "4000 —Ä—É–±/–Ω–æ—á—å", "info": "–ù–æ–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"}
            }
        }
        with open(HOTELS_FILE, "w", encoding="utf-8") as f:
            json.dump(default_hotels, f, ensure_ascii=False, indent=2)
        return default_hotels

HOTELS = load_hotels()

BOOKINGS_FILE = "bookings.json"

def load_bookings():
    if os.path.exists(BOOKINGS_FILE):
        try:
            with open(BOOKINGS_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")
            return {}
    return {}

def save_bookings(bookings):
    try:
        with open(BOOKINGS_FILE, "w", encoding="utf-8") as f:
            json.dump(bookings, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

user_bookings = load_bookings()

# === –ö–û–ù–¢–ê–ö–¢ –ê–î–ú–ò–ù–ê ===
ADMIN_PHONE = "+7 (999) 123-45-67"
ADMIN_NAME = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–µ—Ç–∏ –≥–æ—Å—Ç–∏–Ω–∏—Ü"

# === URL MINI APP (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ú–ï–ù–ò–¢–ï!) ===
#MINI_APP_URL = "https://–≤–∞—à-—Å–∞–π—Ç.—Ä—Ñ/"  # ‚Üê –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –†–ï–ê–õ–¨–ù–´–ô HTTPS URL

# === –ö–õ–ê–í–ò–ê–¢–£–†–´ ===

def get_main_inline_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üè® –í—ã–±—Ä–∞—Ç—å –≥–æ—Å—Ç–∏–Ω–∏—Ü—É", callback_data="select_hotel"),
            InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="book_start")
        ],
        [
            InlineKeyboardButton(
                text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å (Mini App)",
                web_app=WebAppInfo(url=MINI_APP_URL)
            ),
            InlineKeyboardButton(text="üé´ –ú–æ–∏ –±—Ä–æ–Ω–∏", callback_data="show_my_booking")
        ],
        [
            InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", callback_data="send_admin_contact"),
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ])

def get_back_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

def get_hotel_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=hotel, callback_data=f"hotel_{hotel}") for hotel in HOTELS],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])

def get_category_keyboard(hotel: str):
    if hotel not in HOTELS:
        return get_back_keyboard()
    categories = HOTELS[hotel]
    buttons = [[InlineKeyboardButton(text=cat, callback_data=f"cat_{hotel}|{cat}") for cat in categories]]
    buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="select_hotel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ ===
async def safe_delete(message: types.Message):
    if message:
        try:
            await message.delete()
        except Exception as e:
            if "message to delete not found" not in str(e).lower():
                print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    caption = (
        "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ç—å –≥–æ—Å—Ç–∏–Ω–∏—Ü!* üåü\n\n"
        "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ **¬´üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É¬ª**, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ Telegram\n"
        "‚Ä¢ –ò–ª–∏ **¬´üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å (Mini App)¬ª** –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≤ –∫—Ä–∞—Å–∏–≤–æ–π —Ñ–æ—Ä–º–µ"
    )
    try:
        photo = FSInputFile("iz_hotel1.jpg")
        await message.answer_photo(
            photo=photo,
            caption=caption,
            parse_mode="Markdown",
            reply_markup=get_main_inline_keyboard()
        )
    except FileNotFoundError:
        await message.answer(
            "üì∏ –§–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –Ω–æ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã!\n\n" + caption,
            parse_mode="Markdown",
            reply_markup=get_main_inline_keyboard()
        )

@dp.callback_query(F.data == "main_menu")
async def back_to_main(callback: types.CallbackQuery):
    await safe_delete(callback.message)
    await bot.send_message(
        chat_id=callback.from_user.id,
        text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üè†",
        reply_markup=get_main_inline_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "select_hotel")
async def select_hotel(callback: types.CallbackQuery):
    await safe_delete(callback.message)
    await bot.send_message(
        chat_id=callback.from_user.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Å—Ç–∏–Ω–∏—Ü—É:",
        reply_markup=get_hotel_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("hotel_"))
async def show_hotel_info(callback: types.CallbackQuery):
    hotel = callback.data.split("_", 1)[1]
    if hotel not in HOTELS:
        await callback.answer("–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    text = f"*üè® –ì–æ—Å—Ç–∏–Ω–∏—Ü–∞ ¬´{hotel}¬ª*\n\n*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:*\n\n"
    for cat, data in HOTELS[hotel].items():
        text += f"‚Ä¢ *{cat}*\n  üí∞ {data['price']}\n  ‚ÑπÔ∏è {data['info']}\n\n"

    await safe_delete(callback.message)
    await bot.send_message(
        chat_id=callback.from_user.id,
        text=text,
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"book_hotel_{hotel}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="select_hotel")]
        ])
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("book_hotel_"))
async def book_hotel_start(callback: types.CallbackQuery):
    hotel = callback.data.split("book_hotel_", 1)[1]
    if hotel not in HOTELS:
        await callback.answer("–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    await safe_delete(callback.message)
    await bot.send_message(
        chat_id=callback.from_user.id,
        text=f"üè® –í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Å—Ç–∏–Ω–∏—Ü—É *¬´{hotel}¬ª*.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–º–µ—Ä–∞:",
        parse_mode="Markdown",
        reply_markup=get_category_keyboard(hotel)
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("cat_"))
async def confirm_booking(callback: types.CallbackQuery):
    try:
        _, rest = callback.data.split("cat_", 1)
        hotel, category = rest.split("|", 1)
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞.", show_alert=True)
        return

    if hotel not in HOTELS or category not in HOTELS[hotel]:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞.", show_alert=True)
        return

    user_id = str(callback.from_user.id)
    user = callback.from_user
    existing = user_bookings.get(user_id)

    if existing:
        existing_hotel = existing.get("hotel", "–ê–ª—å—Ñ–∞")
        existing_cat = existing.get("category", "‚Äî")
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –∑–∞–º–µ–Ω–∏—Ç—å", callback_data=f"confirm_replace_{hotel}|{category}")],
            [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="main_menu")]
        ])
        await safe_delete(callback.message)
        await bot.send_message(
            chat_id=callback.from_user.id,
            text=(
                f"‚ö† –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
                f"‚Ä¢ –ì–æ—Å—Ç–∏–Ω–∏—Ü–∞: *{existing_hotel}*\n"
                f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{existing_cat}*\n\n"
                f"–•–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ *¬´{category}¬ª* –≤ *¬´{hotel}¬ª*?"
            ),
            parse_mode="Markdown",
            reply_markup=kb
        )
        await callback.answer()
        return

    user_bookings[user_id] = {
        "hotel": hotel,
        "category": category,
        "username": user.username or "‚Äî",
        "full_name": user.full_name or "‚Äî",
        "status": "confirmed"
    }
    save_bookings(user_bookings)
    await _send_booking_confirmation(callback, hotel, category)
    await callback.answer()

@dp.callback_query(F.data.startswith("confirm_replace_"))
async def replace_booking(callback: types.CallbackQuery):
    try:
        _, rest = callback.data.split("confirm_replace_", 1)
        hotel, category = rest.split("|", 1)
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã.", show_alert=True)
        return

    if hotel not in HOTELS or category not in HOTELS[hotel]:
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    user_id = str(callback.from_user.id)
    user = callback.from_user
    user_bookings[user_id] = {
        "hotel": hotel,
        "category": category,
        "username": user.username or "‚Äî",
        "full_name": user.full_name or "‚Äî",
        "status": "confirmed"
    }
    save_bookings(user_bookings)
    await _send_booking_confirmation(callback, hotel, category)
    await callback.answer()

async def _send_booking_confirmation(callback_or_message, hotel: str, category: str):
    await safe_delete(callback_or_message.message)

    text = (
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –Ω–æ–º–µ—Ä *¬´{category}¬ª* –≤ –≥–æ—Å—Ç–∏–Ω–∏—Ü–µ *¬´{hotel}¬ª*.\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
    )

    user = callback_or_message.from_user
    await bot.send_message(
        chat_id=user.id,
        text=text,
        parse_mode="Markdown",
        reply_markup=get_back_keyboard()
    )

    if ADMIN_CHAT_ID:
        await bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=(
                f"üõé –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n"
                f"–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞: *{hotel}*\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{category}*\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (@{user.username or '‚Äî'})\n"
                f"ID: `{user.id}`"
            ),
            parse_mode="Markdown"
        )

@dp.callback_query(F.data == "book_start")
async def book_start(callback: types.CallbackQuery):
    await select_hotel(callback)

@dp.callback_query(F.data == "show_my_booking")
async def show_my_booking(callback: types.CallbackQuery):
    await safe_delete(callback.message)
    user_id = str(callback.from_user.id)
    if user_id in user_bookings:
        b = user_bookings[user_id]
        hotel = b.get("hotel", "–ê–ª—å—Ñ–∞")
        category = b.get("category", "‚Äî")
        full_name = b.get("full_name", "‚Äî")
        username = b.get("username", "‚Äî")

        text = (
            f"üìå –í–∞—à–∞ –∑–∞—è–≤–∫–∞:\n\n"
            f"‚Ä¢ –ì–æ—Å—Ç–∏–Ω–∏—Ü–∞: *{hotel}*\n"
            f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{category}*\n"
            f"‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞\n"
            f"‚Ä¢ –ò–º—è: {full_name}\n"
            f"‚Ä¢ Username: @{username}\n\n"
            f"–•–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å?"
        )
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="cancel_confirm")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ])
    else:
        text = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫."
        kb = get_back_keyboard()

    await bot.send_message(
        chat_id=callback.from_user.id,
        text=text,
        parse_mode="Markdown",
        reply_markup=kb
    )
    await callback.answer()

@dp.callback_query(F.data == "cancel_confirm")
async def cancel_booking_confirm(callback: types.CallbackQuery):
    await safe_delete(callback.message)
    user_id = str(callback.from_user.id)
    if user_id not in user_bookings:
        await callback.answer("–ó–∞—è–≤–∫–∞ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", show_alert=True)
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_yes")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data="main_menu")]
    ])
    await bot.send_message(
        chat_id=callback.from_user.id,
        text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É?",
        reply_markup=kb
    )
    await callback.answer()

@dp.callback_query(F.data == "cancel_yes")
async def do_cancel(callback: types.CallbackQuery):
    await safe_delete(callback.message)
    user_id = str(callback.from_user.id)
    if user_id in user_bookings:
        booked = user_bookings.pop(user_id)
        save_bookings(user_bookings)
        hotel = booked.get("hotel", "–ê–ª—å—Ñ–∞")
        category = booked.get("category", "‚Äî")
        text = f"‚ùå –ó–∞—è–≤–∫–∞ –Ω–∞ –Ω–æ–º–µ—Ä *¬´{category}¬ª* –≤ *¬´{hotel}¬ª* –æ—Ç–º–µ–Ω–µ–Ω–∞."
    else:
        text = "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    await bot.send_message(
        chat_id=callback.from_user.id,
        text=text,
        parse_mode="Markdown",
        reply_markup=get_back_keyboard()
    )
    await callback.answer()

@dp.callback_query(F.data == "send_admin_contact")
async def send_admin_contact(callback: types.CallbackQuery):
    await safe_delete(callback.message)
    await callback.message.answer_contact(
        phone_number=ADMIN_PHONE,
        first_name=ADMIN_NAME,
        vcard=f"BEGIN:VCARD\nVERSION:3.0\nFN:{ADMIN_NAME}\nTEL;TYPE=CELL:{ADMIN_PHONE}\nEND:VCARD"
    )
    await bot.send_message(
        chat_id=callback.from_user.id,
        text="üìû –ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
        reply_markup=get_back_keyboard()
    )
    await callback.answer()

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–ê–ù–ù–´–• –ò–ó MINI APP (–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û) ===
@dp.message(F.web_app_data)
async def handle_web_app_data(message: types.Message):
    try:
        raw_data = message.web_app_data.data
        data = json.loads(raw_data)

        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Å—Ç–∏–Ω–∏—Ü—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        hotel = data.get("hotel")
        category = data.get("category")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if not hotel or not category:
            await message.answer(
                "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–º–µ—Ä–∞.",
                reply_markup=get_back_keyboard()
            )
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–∞–∫–∞—è –≥–æ—Å—Ç–∏–Ω–∏—Ü–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        if hotel not in HOTELS or category not in HOTELS[hotel]:
            await message.answer(
                f"‚ùå –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è:\n"
                f"–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞: *{hotel}*\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: *{category}*\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
                parse_mode="Markdown",
                reply_markup=get_back_keyboard()
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –§–ò–û
        last_name = data.get("lastName", "").strip()
        first_name = data.get("firstName", "").strip()
        middle_name = data.get("middleName", "").strip()
        full_name = f"{last_name} {first_name}".strip()
        if middle_name:
            full_name += f" {middle_name}"
        full_name = full_name or "‚Äî"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—É—é –±—Ä–æ–Ω—å
        user_id = str(message.from_user.id)
        user_bookings[user_id] = {
            "hotel": hotel,
            "category": category,
            "status": "from_miniapp",
            "full_name": full_name,
            "username": message.from_user.username or "‚Äî",
            "phone": data.get("phone", "‚Äî"),
            "email": data.get("email") or "‚Äî",
            "guests": data.get("guests", 1),
            "passport_series": data.get("passportSeries", "‚Äî"),
            "passport_number": data.get("passportNumber", "‚Äî"),
            "issue_date": data.get("issueDate", "‚Äî"),
            "issued_by": data.get("issuedBy", "‚Äî"),
            "checkin": data.get("checkin", "‚Äî"),
            "checkout": data.get("checkout", "‚Äî"),
            "comment": data.get("comment") or "‚Äî"
        }
        save_bookings(user_bookings)

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
            f"üè® *–ì–æ—Å—Ç–∏–Ω–∏—Ü–∞:* {hotel}\n"
            f"üõè *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* {category}\n"
            f"üë§ *–ì–æ—Å—Ç—å:* {full_name}\n"
            f"üìÖ *–î–∞—Ç—ã:* {data.get('checkin')} ‚Äì {data.get('checkout')}\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {data.get('phone')}\n\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            parse_mode="Markdown",
            reply_markup=get_back_keyboard()
        )

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if ADMIN_CHAT_ID:
            admin_text = (
                f"üõé **–ù–æ–≤–∞—è –±—Ä–æ–Ω—å —á–µ—Ä–µ–∑ Mini App!**\n\n"
                f"üè® –ì–æ—Å—Ç–∏–Ω–∏—Ü–∞: {hotel}\n"
                f"üõè –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                f"üë§ –ì–æ—Å—Ç—å: {full_name}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone')}\n"
                f"üìß Email: {data.get('email', '‚Äî')}\n"
                f"üë• –ì–æ—Å—Ç–µ–π: {data.get('guests')}\n"
                f"üìÖ –î–∞—Ç—ã: {data.get('checkin')} ‚Äì {data.get('checkout')}\n"
                f"üõÇ –ü–∞—Å–ø–æ—Ä—Ç: {data.get('passportSeries')} {data.get('passportNumber')}\n"
                f"–í—ã–¥–∞–Ω: {data.get('issuedBy')} ({data.get('issueDate')})\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment', '‚Äî')}\n\n"
                f"ID: `{message.from_user.id}`\n"
                f"Username: @{message.from_user.username or '‚Äî'}"
            )
            await bot.send_message(ADMIN_CHAT_ID, admin_text, parse_mode="Markdown")

    except json.JSONDecodeError:
        await message.answer(
            "‚ùå –ü–æ–ª—É—á–µ–Ω—ã –ø–æ–≤—Ä–µ–∂–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
            reply_markup=get_back_keyboard()
        )
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Mini App: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
            reply_markup=get_back_keyboard()
        )
# === –ó–ê–ü–£–°–ö ===
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    if ADMIN_CHAT_ID:
        print(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: –≤–∫–ª—é—á–µ–Ω—ã (ID: {ADMIN_CHAT_ID})")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())